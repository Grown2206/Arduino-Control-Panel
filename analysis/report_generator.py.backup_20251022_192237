"""
Verbesserte PDF-Generierung mit optimierter Lesbarkeit und professionellen Formulierungen
Diese Datei ersetzt die generate_pdf Methode im report_generator_enhanced.py
"""

import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image, KeepTogether
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_RIGHT, TA_LEFT, TA_JUSTIFY


def generate_pdf_improved(run_details: dict, file_path: str):
    """
    Generiert professionellen, gut lesbaren PDF-Bericht.
    
    VERBESSERUNGEN:
    - Helle, kontrastreiche Farben
    - Schwarze Schrift auf weißem/hellem Hintergrund
    - Professionelle Formulierungen
    - Strukturierte Kapitel
    - Bessere Tabellen-Lesbarkeit
    """
    from analysis.trend_analyzer import TrendAnalyzer
    
    # Daten vorbereiten
    log_data = run_details.get('log', {})
    event_log = log_data.get('events', [])
    sensor_stats = log_data.get('sensors', {})
    analysis = TrendAnalyzer.analyze_timing(event_log)
    
    # Dokument erstellen
    doc = SimpleDocTemplate(
        file_path,
        pagesize=A4,
        topMargin=2*cm,
        bottomMargin=2.5*cm,
        leftMargin=2*cm,
        rightMargin=2*cm
    )
    
    # Styles definieren
    styles = getSampleStyleSheet()
    
    # Custom Styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=22,
        textColor=colors.HexColor('#1a5490'),
        spaceAfter=20,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )
    
    heading2_style = ParagraphStyle(
        'CustomHeading2',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#2c5aa0'),
        spaceAfter=10,
        spaceBefore=20,
        fontName='Helvetica-Bold'
    )
    
    heading3_style = ParagraphStyle(
        'CustomHeading3',
        parent=styles['Heading3'],
        fontSize=12,
        textColor=colors.HexColor('#34495e'),
        spaceAfter=8,
        spaceBefore=12,
        fontName='Helvetica-Bold'
    )
    
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.black,
        spaceAfter=6,
        fontName='Helvetica'
    )
    
    intro_style = ParagraphStyle(
        'IntroStyle',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.HexColor('#2c3e50'),
        spaceAfter=12,
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )
    
    # Story (Inhalt) erstellen
    story = []
    
    # === TITELSEITE ===
    story.append(Spacer(1, 1*cm))
    story.append(Paragraph(f"Prüfbericht: {run_details.get('name', 'Testlauf')}", title_style))
    story.append(Spacer(1, 0.3*cm))
    
    # Untertitel
    subtitle = f"Testlauf-ID: #{run_details.get('id', '-')} | Datum: {datetime.now().strftime('%d.%m.%Y')}"
    story.append(Paragraph(subtitle, ParagraphStyle(
        'Subtitle',
        parent=styles['Normal'],
        fontSize=11,
        textColor=colors.HexColor('#7f8c8d'),
        alignment=TA_CENTER,
        spaceAfter=30
    )))
    
    # === QUALITÄTSBEWERTUNG (Score-Box) ===
    quality = analysis.get('quality_metrics', {})
    perf_rating = analysis.get('performance_rating', {})
    cycle_stats = analysis.get('cycle_analysis', {})
    
    overall_score = quality.get('overall_score', 0)
    rating = perf_rating.get('rating', 'N/A')
    pass_fail = perf_rating.get('pass_fail', 'N/A')
    star_rating = perf_rating.get('star_rating', 0)
    
    # Score-Farbe bestimmen
    if overall_score >= 85:
        score_color = colors.HexColor('#27ae60')  # Grün
    elif overall_score >= 70:
        score_color = colors.HexColor('#f39c12')  # Orange
    else:
        score_color = colors.HexColor('#e74c3c')  # Rot
    
    score_data = [[
        Paragraph("<b>Gesamt-Score</b>", normal_style),
        Paragraph(f"<b><font size=16 color='#{score_color.hexval()[2:]}'>{overall_score:.1f}</font></b>", normal_style),
        Paragraph(f"<b>{rating}</b>", normal_style),
        Paragraph(f"<b>{pass_fail}</b>", normal_style)
    ]]
    
    score_table = Table(score_data, colWidths=[4*cm, 4*cm, 4*cm, 4*cm])
    score_table.setStyle(TableStyle([
        # Heller Hintergrund statt dunkel!
        ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#ecf0f1')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#bdc3c7')),
        ('TOPPADDING', (0, 0), (-1, -1), 12),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ]))
    
    story.append(score_table)
    story.append(Spacer(1, 0.8*cm))
    
    # === EINLEITUNG ===
    story.append(Paragraph("<b>Zusammenfassung der Prüfung</b>", heading2_style))
    
    intro_text = f"""Der vorliegende Prüfbericht dokumentiert die Ergebnisse des automatisierten Testlaufs 
    <b>"{run_details.get('name', 'Unbekannt')}"</b> (ID: #{run_details.get('id', '-')}). Die Prüfung wurde am 
    {run_details.get('start_time', 'N/A')} durchgeführt und umfasste <b>{run_details.get('cycles', 0)} Testzyklen</b> 
    mit einer Gesamtdauer von <b>{run_details.get('duration', 0):.2f} Sekunden</b>. Die nachfolgende Analyse basiert 
    auf statistischen Auswertungen der erfassten Zeitdaten und umfasst Anomalieerkennung, Trendanalyse sowie 
    eine umfassende Qualitätsbewertung des Testsystems."""
    
    story.append(Paragraph(intro_text, intro_style))
    story.append(Spacer(1, 0.5*cm))
    
    # === TESTLAUF-INFORMATIONEN ===
    story.append(Paragraph("<b>1. Testlauf-Informationen</b>", heading2_style))
    
    info_data = [
        ['Parameter', 'Wert'],
        ['Testlauf-ID:', str(run_details.get('id', '-'))],
        ['Sequenzname:', str(run_details.get('sequence_name', '-'))],
        ['Startzeit:', str(run_details.get('start_time', '-'))],
        ['Endzeit:', str(run_details.get('end_time', '-'))],
        ['Gesamtdauer:', f"{run_details.get('duration', 0):.2f} Sekunden"],
        ['Anzahl Zyklen:', str(run_details.get('cycles', 0))],
        ['Endstatus:', str(run_details.get('status', '-'))]
    ]
    
    info_table = Table(info_data, colWidths=[6*cm, 10*cm])
    info_table.setStyle(TableStyle([
        # Header
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498db')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        # Body - HELL!
        ('BACKGROUND', (0, 1), (0, -1), colors.HexColor('#ecf0f1')),
        ('BACKGROUND', (1, 1), (1, -1), colors.white),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 1), (1, -1), 'Helvetica'),
        # Allgemein
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    story.append(info_table)
    story.append(Spacer(1, 0.8*cm))
    
    # === QUALITÄTSMETRIKEN ===
    story.append(Paragraph("<b>2. Qualitätsmetriken und Bewertung</b>", heading2_style))
    
    quality_intro = f"""Die Qualitätsbewertung erfolgt anhand eines multidimensionalen Scoring-Systems, 
    das verschiedene Leistungsaspekte berücksichtigt. Der ermittelte Gesamt-Score von <b>{overall_score:.1f} Punkten</b> 
    entspricht der Bewertung <b>"{rating}"</b>. Die Prüfung wurde mit dem Status <b>"{pass_fail}"</b> abgeschlossen."""
    
    story.append(Paragraph(quality_intro, intro_style))
    story.append(Spacer(1, 0.3*cm))
    
    quality_data = [
        ['Qualitätskriterium', 'Wert', 'Bewertung'],
        ['Konsistenz-Score', f"{quality.get('consistency_score', 0):.1f}%", _get_quality_text(quality.get('consistency_score', 0))],
        ['Zuverlässigkeits-Score', f"{quality.get('reliability_score', 0):.1f}%", _get_quality_text(quality.get('reliability_score', 0))],
        ['Präzisions-Score (Jitter)', f"{quality.get('jitter_score', 0):.1f}%", _get_quality_text(quality.get('jitter_score', 0))],
        ['Anomalierate', f"{quality.get('anomaly_rate', 0):.2f}%", _get_anomaly_rate_text(quality.get('anomaly_rate', 0))]
    ]
    
    quality_table = Table(quality_data, colWidths=[6*cm, 4*cm, 6*cm])
    quality_table.setStyle(TableStyle([
        # Header
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498db')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        # Body
        ('BACKGROUND', (0, 1), (0, -1), colors.HexColor('#ecf0f1')),
        ('BACKGROUND', (1, 1), (-1, -1), colors.white),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (0, -1), 'Helvetica-Bold'),
        # Allgemein
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (1, 0), (-1, -1), 'CENTER'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    story.append(quality_table)
    story.append(Spacer(1, 0.8*cm))
    
    # === ZYKLUSZEIT-ANALYSE ===
    story.append(Paragraph("<b>3. Zykluszeit-Analyse</b>", heading2_style))
    
    cycle_intro = f"""Die statistische Auswertung der Zykluszeiten basiert auf <b>{len(analysis.get('raw_cycle_times', []))} 
    gemessenen Zyklen</b>. Die durchschnittliche Zykluszeit beträgt <b>{cycle_stats.get('avg', 0):.2f} ms</b> bei einer 
    Standardabweichung von <b>{cycle_stats.get('std', 0):.2f} ms</b>. Die ermittelte Stabilität von 
    <b>{cycle_stats.get('stability', 0):.1f}%</b> indiziert {_get_stability_interpretation_text(cycle_stats.get('stability', 0))}."""
    
    story.append(Paragraph(cycle_intro, intro_style))
    story.append(Spacer(1, 0.3*cm))
    
    cycle_data = [
        ['Statistische Kennzahl', 'Wert', 'Interpretation'],
        ['Arithmetischer Mittelwert', f"{cycle_stats.get('avg', 0):.2f} ms", 'Durchschnittliche Zykluszeit'],
        ['Median (50. Perzentil)', f"{cycle_stats.get('median', 0):.2f} ms", 'Typische Ausführungszeit'],
        ['Standardabweichung (σ)', f"{cycle_stats.get('std', 0):.2f} ms", 'Schwankungsbreite der Messwerte'],
        ['Minimum / Maximum', f"{cycle_stats.get('min', 0):.2f} / {cycle_stats.get('max', 0):.2f} ms", 'Schnellster / Langsamster Zyklus'],
        ['Interquartilsabstand (IQR)', f"{cycle_stats.get('iqr', 0):.2f} ms", 'Mittlere 50% der Verteilung'],
        ['Variationskoeffizient (CV)', f"{cycle_stats.get('cv', 0):.2f}%", 'Relative Streuung der Daten'],
        ['Stabilitätskennzahl', f"{cycle_stats.get('stability', 0):.1f}%", _get_stability_interpretation_text(cycle_stats.get('stability', 0))],
        ['Trend-Klassifikation', f"{cycle_stats.get('trend', 'N/A').upper()}", f"R² = {cycle_stats.get('trend_r_squared', 0):.4f}"],
    ]
    
    cycle_table = Table(cycle_data, colWidths=[6*cm, 4*cm, 6*cm])
    cycle_table.setStyle(TableStyle([
        # Header
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498db')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        # Body
        ('BACKGROUND', (0, 1), (0, -1), colors.HexColor('#ecf0f1')),
        ('BACKGROUND', (1, 1), (-1, -1), colors.white),
        ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
        ('FONTNAME', (0, 1), (0, -1), 'Helvetica-Bold'),
        # Allgemein
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (1, 0), (1, -1), 'CENTER'),
        ('ALIGN', (2, 0), (2, -1), 'LEFT'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('TOPPADDING', (0, 0), (-1, -1), 6),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
    ]))
    
    story.append(cycle_table)
    story.append(Spacer(1, 0.8*cm))
    
    # === ANOMALIE-ANALYSE ===
    anomaly_details = analysis.get('anomaly_details', {})
    anomalies = cycle_stats.get('anomalies', [])
    
    if anomalies:
        story.append(Paragraph("<b>4. Anomalie-Analyse</b>", heading2_style))
        
        anomaly_intro = f"""Bei der statistischen Ausreißererkennung mittels Z-Score-Methode (Schwellwert: 2.5σ) 
        wurden <b>{len(anomalies)} Anomalien</b> identifiziert, was einer Anomalierate von 
        <b>{anomaly_details.get('anomaly_rate', 0):.2f}%</b> entspricht. Die Anomalien werden nach Schweregrad 
        klassifiziert (kritisch, hoch, mittel) basierend auf der statistischen Abweichung vom Erwartungswert."""
        
        story.append(Paragraph(anomaly_intro, intro_style))
        story.append(Spacer(1, 0.3*cm))
        
        # Anomalie-Übersicht
        anomaly_summary_data = [
            ['Kategorie', 'Anzahl', 'Anteil'],
            ['Gesamt-Anomalien', str(anomaly_details.get('total_anomalies', 0)), f"{anomaly_details.get('anomaly_rate', 0):.2f}%"],
            ['Zyklus-Anomalien', str(anomaly_details.get('cycle_anomaly_count', 0)), '-'],
            ['Schritt-Anomalien', str(anomaly_details.get('step_anomaly_count', 0)), '-'],
        ]
        
        anomaly_summary_table = Table(anomaly_summary_data, colWidths=[8*cm, 4*cm, 4*cm])
        anomaly_summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#e74c3c')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BACKGROUND', (0, 1), (0, -1), colors.HexColor('#ecf0f1')),
            ('BACKGROUND', (1, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        story.append(anomaly_summary_table)
        story.append(Spacer(1, 0.5*cm))
        
        # Top 5 Anomalien
        story.append(Paragraph("<b>Detaillierte Auflistung der erkannten Anomalien:</b>", heading3_style))
        
        anomaly_detail_data = [['Zyklus', 'Zeit (ms)', 'Abweichung', 'Z-Score', 'Schweregrad']]
        
        # Sortiere nach Z-Score
        sorted_anomalies = sorted(anomalies, key=lambda x: x.get('z_score', 0), reverse=True)
        
        for anom in sorted_anomalies[:10]:  # Top 10
            severity = anom.get('severity', 'mittel').upper()
            anomaly_detail_data.append([
                f"#{anom.get('cycle', 0)}",
                f"{anom.get('time', 0):.2f}",
                f"{anom.get('deviation_percent', 0):+.1f}%",
                f"{anom.get('z_score', 0):.2f}",
                severity
            ])
        
        anomaly_detail_table = Table(anomaly_detail_data, colWidths=[3*cm, 3*cm, 3*cm, 3*cm, 4*cm])
        anomaly_detail_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#e74c3c')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        story.append(anomaly_detail_table)
        story.append(Spacer(1, 0.8*cm))
    
    # === EMPFEHLUNGEN ===
    recommendations = quality.get('recommendations', [])
    
    if recommendations:
        story.append(Paragraph("<b>5. Handlungsempfehlungen</b>", heading2_style))
        
        rec_intro = """Basierend auf der durchgeführten Analyse werden folgende Handlungsempfehlungen zur 
        Optimierung des Testsystems ausgesprochen:"""
        
        story.append(Paragraph(rec_intro, intro_style))
        story.append(Spacer(1, 0.3*cm))
        
        for i, rec in enumerate(recommendations, 1):
            bullet_style = ParagraphStyle(
                'Bullet',
                parent=styles['Normal'],
                fontSize=10,
                textColor=colors.black,
                leftIndent=20,
                spaceAfter=8,
                bulletIndent=10,
                fontName='Helvetica'
            )
            story.append(Paragraph(f"{i}. {rec}", bullet_style))
        
        story.append(Spacer(1, 0.8*cm))
    
    # === SENSOR-DATEN ===
    if sensor_stats:
        story.append(Paragraph("<b>6. Sensor-Auswertung</b>", heading2_style))
        
        sensor_intro = """Die nachfolgende Tabelle fasst die während des Testlaufs erfassten Umgebungsbedingungen zusammen:"""
        story.append(Paragraph(sensor_intro, intro_style))
        story.append(Spacer(1, 0.3*cm))
        
        sensor_data = [['Sensor', 'Minimum', 'Maximum', 'Durchschnitt']]
        
        if 'temp' in sensor_stats:
            s = sensor_stats['temp']
            sensor_data.append([
                'Temperatur',
                f"{s.get('min', 0):.1f} °C",
                f"{s.get('max', 0):.1f} °C",
                f"{s.get('avg', 0):.1f} °C"
            ])
        
        if 'humid' in sensor_stats:
            s = sensor_stats['humid']
            sensor_data.append([
                'Luftfeuchtigkeit',
                f"{s.get('min', 0):.1f}%",
                f"{s.get('max', 0):.1f}%",
                f"{s.get('avg', 0):.1f}%"
            ])
        
        sensor_table = Table(sensor_data, colWidths=[5*cm, 3.5*cm, 3.5*cm, 4*cm])
        sensor_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498db')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BACKGROUND', (0, 1), (0, -1), colors.HexColor('#ecf0f1')),
            ('BACKGROUND', (1, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        story.append(sensor_table)
        story.append(Spacer(1, 0.8*cm))
    
    # === NEUE SEITE FÜR DIAGRAMME ===
    story.append(PageBreak())
    story.append(Paragraph("<b>7. Grafische Auswertungen</b>", heading2_style))
    
    viz_intro = """Die nachfolgenden Diagramme visualisieren die erfassten Messdaten und unterstützen die 
    Interpretation der statistischen Kennzahlen. Anomalien sind in den Diagrammen entsprechend markiert."""
    
    story.append(Paragraph(viz_intro, intro_style))
    story.append(Spacer(1, 0.5*cm))
    
    # Charts generieren
    from report_generator_enhanced import ReportGenerator
    charts = ReportGenerator._create_charts(analysis, log_data.get('sensors_raw'))
    
    chart_titles = [
        "Zykluszeiten-Verlauf mit Anomalieerkennung",
        "Box-Plot Analyse der Verteilung",
        "Schritt-für-Schritt Timing-Analyse",
        "Häufigkeitsverteilung (Histogramm)",
        "Sensor-Verlaufsdaten"
    ]
    
    for i, chart_buf in enumerate(charts):
        if i < len(chart_titles):
            story.append(Paragraph(f"<b>{chart_titles[i]}</b>", heading3_style))
        
        story.append(Image(chart_buf, width=16*cm, height=10*cm))
        story.append(Spacer(1, 0.5*cm))
    
    # === FOOTER / ABSCHLUSS ===
    story.append(PageBreak())
    story.append(Spacer(1, 2*cm))
    
    conclusion_style = ParagraphStyle(
        'Conclusion',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.HexColor('#2c3e50'),
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )
    
    conclusion_text = f"""<b>Fazit:</b> Der durchgeführte Testlauf "{run_details.get('name', 'Unbekannt')}" 
    wurde mit einem Qualitäts-Score von <b>{overall_score:.1f}/100 Punkten</b> bewertet, was der Klassifikation 
    <b>"{rating}"</b> entspricht. Die statistische Analyse umfasste {len(analysis.get('raw_cycle_times', []))} Messzyklen 
    und basiert auf wissenschaftlich fundierten Auswertungsverfahren. Die dokumentierten Ergebnisse dienen der 
    Qualitätssicherung und ermöglichen eine objektive Bewertung der Systemperformance."""
    
    story.append(Paragraph(conclusion_text, conclusion_style))
    story.append(Spacer(1, 1*cm))
    
    # Unterschriftsbereich
    signature_data = [
        ['', '', ''],
        ['_____________________', '_____________________', '_____________________'],
        ['Prüfer/in', 'Datum', 'Unterschrift']
    ]
    
    signature_table = Table(signature_data, colWidths=[5.5*cm, 5.5*cm, 5.5*cm])
    signature_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('TOPPADDING', (0, 1), (-1, 1), 20),
    ]))
    
    story.append(signature_table)
    story.append(Spacer(1, 1*cm))
    
    # Fußzeile
    footer_text = f"""<i>Dieser Bericht wurde automatisch generiert am {datetime.now().strftime('%d.%m.%Y um %H:%M:%S Uhr')} 
    durch das Drexler Dynamics Arduino Control Panel. Die verwendeten Analysemethoden basieren auf etablierten 
    statistischen Verfahren und dienen der objektiven Qualitätsbewertung von Prüfabläufen.</i>"""
    
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        textColor=colors.HexColor('#7f8c8d'),
        alignment=TA_CENTER,
        fontName='Helvetica'
    )
    
    story.append(Paragraph(footer_text, footer_style))
    
    # PDF erstellen
    doc.build(story)


# === HILFSFUNKTIONEN ===

def _get_quality_text(score: float) -> str:
    """Gibt Bewertungstext für Quality-Score zurück."""
    if score >= 95:
        return "Exzellent"
    elif score >= 85:
        return "Sehr gut"
    elif score >= 75:
        return "Gut"
    elif score >= 60:
        return "Befriedigend"
    elif score >= 50:
        return "Ausreichend"
    else:
        return "Mangelhaft"


def _get_anomaly_rate_text(rate: float) -> str:
    """Gibt Bewertungstext für Anomalierate zurück."""
    if rate < 2:
        return "Sehr niedrig (optimal)"
    elif rate < 5:
        return "Niedrig (gut)"
    elif rate < 10:
        return "Moderat (akzeptabel)"
    elif rate < 15:
        return "Erhöht (problematisch)"
    else:
        return "Hoch (kritisch)"


def _get_stability_interpretation_text(stability: float) -> str:
    """Gibt ausführlichen Interpretationstext für Stabilität zurück."""
    if stability >= 95:
        return "eine exzellente Systemstabilität mit sehr geringen Schwankungen"
    elif stability >= 85:
        return "eine sehr gute Stabilität mit akzeptablen Schwankungen"
    elif stability >= 70:
        return "eine gute Stabilität mit moderaten Schwankungen"
    elif stability >= 60:
        return "eine befriedigende Stabilität mit erhöhten Schwankungen"
    else:
        return "eine mangelhafte Stabilität mit starken Schwankungen"